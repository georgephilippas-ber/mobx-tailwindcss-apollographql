%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2376 589
%%HiResBoundingBox: 0 0 2376 588.95996
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2376 588.95996 re
W
q
[0.24 0 0 -0.24 0 588.95996] cm
q
0 0 9899.999 2452.3508 re
W*
q
[27.243853 0 0 27.23657 217.63802 -53.396507] cm
40.519001 82.334 m
40.493 82.334 40.468002 82.325996 40.442001 82.317001 c
40.358002 81.349998 l
40.519001 82.334 l
h
f
25.587 76.742996 m
25.565001 76.796997 25.539 76.849998 25.511 76.898994 c
25.511999 76.813004 25.559999 76.775002 25.587 76.742996 c
h
f
37.997002 76.540001 m
37.976002 76.593002 37.951 76.643997 37.924 76.691002 c
37.924 76.607002 37.971001 76.566002 37.997002 76.540001 c
h
f
21.674999 35.501999 m
21.389 35.549999 21.038 35.626999 20.713999 35.756001 c
20.989 35.637001 21.313 35.549999 21.674999 35.501999 c
h
f
22.247 35.431999 m
22.247 35.437 l
22.192999 35.437 l
22.225 35.431999 22.247 35.431999 22.247 35.431999 c
h
f
98.138 81.078003 m
97.846001 81.875 97.128998 82.234001 96.106003 82.313004 c
94.273003 82.227005 91.710007 81.264 88.853004 80.201004 c
88.608002 80.108002 88.369003 80.022003 88.116005 79.929001 c
86.987007 79.517998 86.057007 79.211998 85.367004 79.007004 c
85.327003 78.993004 85.287003 78.980003 85.247002 78.973007 c
84.250999 78.741005 83.096001 78.601006 81.143005 78.529007 c
80.425003 78.502007 52.211006 75.27401 52.211006 75.27401 c
49.388008 74.82901 l
45.443008 74.06501 l
26.274008 70.286011 l
22.535007 69.277008 l
22.535007 69.270004 22.528008 69.256004 22.528008 69.250008 c
21.074007 68.772011 19.812008 67.96801 18.882008 66.945007 c
18.875008 66.952011 18.869007 66.965004 18.862007 66.971008 c
18.490007 66.567009 18.563007 66.506012 18.118008 66.028008 c
14.458008 61.67701 l
14.406008 64.813011 14.153008 79.438011 14.166008 79.465012 c
14.160008 79.485008 14.153009 79.505013 14.140008 79.518013 c
14.114008 79.558014 14.054008 79.604012 14.054008 79.697014 c
14.054008 79.704018 14.054008 79.704018 14.047008 79.711014 c
13.728007 80.296013 13.230007 80.548012 13.230007 80.555016 c
13.111007 80.861015 11.158007 82.308014 10.414007 82.335014 c
1.897 82.335014 l
1.525 82.335014 1.737 81.511017 1.751 81.146011 c
1.812 79.764008 5.265 78.184013 9.37 78.184013 c
9.59 78.184013 9.815 78.191017 10.041 78.20401 c
10.107 78.20401 10.307 78.21801 10.446 78.225014 c
8.957 61.570999 l
8.957 61.563999 l
8.757999 59.337997 l
8.724999 58.832996 l
8.445999 54.715996 l
8.438999 54.615997 l
8.332999 54.542995 8.232999 54.462997 8.126999 54.376999 c
8.120999 54.369999 8.106998 54.362999 8.100999 54.355999 c
6.905999 53.101997 l
6.254999 52.230999 5.762999 51.167999 5.503999 49.985996 c
5.497999 49.971996 5.489999 49.959995 5.489999 49.939995 c
5.437999 49.494995 5.376999 49.076996 5.310999 48.677994 c
5.310999 48.663994 5.310999 48.650993 5.304999 48.643993 c
4.746999 45.410992 3.79 43.549995 3.976999 39.896996 c
4.062999 38.255997 6.141999 33.593994 6.805999 32.942997 c
7.463999 32.284996 8.665999 31.282997 9.768 30.691998 c
10.877 30.093998 12.238999 29.455997 12.664 27.502998 c
12.756 27.091999 12.822 26.712997 12.822 26.540998 c
12.816 26.028999 12.065 25.643999 11.507999 25.577999 c
10.955999 25.504999 9.886999 25.397999 9.382 25.146 c
8.672 24.781 8.081 23.871 8.107 22.829 c
8.134001 21.852001 8.990001 20.325001 9.190001 19.84 c
9.211 19.799999 9.223001 19.773001 9.237 19.753 c
9.655001 18.989 10.672001 17.176001 10.911 16.784 c
12.18 14.712 12.93 14.173 12.950001 14.167 c
13.295001 13.829 14.046001 13.356999 14.631 13.032 c
15.992001 12.287 17.792 11.663 19.027 11.631 c
23.006001 11.516999 24.924999 12.992 26.167999 15.311 c
26.884998 16.639 27.157 18.121 27.043999 19.535 c
27.043999 19.635 l
27.030998 19.748001 27.018 19.861 27.003998 19.973 c
26.983997 20.086 26.971998 20.191999 26.950998 20.305 c
26.936998 20.365 26.929998 20.425001 26.910997 20.484001 c
26.538998 22.398001 25.462997 24.111002 23.855997 25.054001 c
22.653997 25.758001 21.782997 26.023001 21.112997 26.129002 c
21.025997 26.169003 20.932997 26.203001 20.833998 26.235003 c
19.624998 26.601002 19.046997 27.218002 18.754997 28.042002 c
18.488997 28.772001 18.223997 29.868002 18.296997 30.307001 c
18.296997 30.314001 18.296997 30.314001 18.296997 30.314001 c
18.310997 30.367001 18.322996 30.407001 18.343998 30.439001 c
18.396997 30.52 18.442999 30.606001 18.489998 30.692001 c
18.602999 30.957001 18.715998 31.243002 18.808998 31.548002 c
19.432999 33.474003 19.638998 36.091003 19.392998 38.077003 c
18.269999 47.589005 l
18.256998 47.715004 l
18.289999 47.768005 18.322998 47.815002 18.369999 47.868004 c
18.369999 47.874004 l
18.375999 47.888004 l
19.073 48.865005 20.143999 49.920006 21.205999 51.103004 c
21.942999 51.919006 24.062 54.391006 25.198 55.726006 c
25.337 55.719006 25.476 55.719006 25.622999 55.719006 c
29.216 55.719006 32.277 57.592007 33.493 60.222008 c
50.981003 66.266006 l
51.021004 66.27401 51.054005 66.280006 51.094002 66.293007 c
52.157001 66.499008 l
52.177002 66.499008 l
52.198002 66.505005 l
82.266006 74.901001 l
82.365005 74.728004 82.471008 74.576004 82.598007 74.456001 c
82.618004 74.436005 82.637009 74.417 82.658005 74.403 c
82.850006 74.237 83.070007 74.151001 83.302002 74.130997 c
83.455002 74.109993 83.621002 74.123993 83.780998 74.191994 c
92.308998 77.452995 l
97.787994 79.551994 l
98.563004 79.849998 98.317001 80.586998 98.138 81.078003 c
h
f
Q
q
[26.329439 0 0 26.322401 9610.3105 394.836] cm
-235 0 3 64 re
f
Q
q
[59.260494 0 0 59.244656 3879.0442 458.15671] cm
0.3 18.82 m
0.34 18.379999 0.476667 17.940001 0.71 17.5 c
0.943333 17.059999 1.22 16.700001 1.54 16.42 c
2.966667 17.286667 4.32 17.719999 5.6 17.719999 c
6.16 17.719999 6.57 17.593332 6.83 17.34 c
7.09 17.086668 7.22 16.773334 7.22 16.4 c
7.22 15.773333 6.8 15.28 5.96 14.92 c
3.6 13.92 l
2.68 13.506667 1.973333 13.01 1.48 12.43 c
0.986667 11.85 0.74 11.113334 0.74 10.22 c
0.74 9.606667 0.863333 9.046667 1.11 8.54 c
1.356667 8.033333 1.703333 7.593333 2.15 7.22 c
2.596667 6.846666 3.126667 6.556666 3.74 6.35 c
4.353334 6.143333 5.033334 6.04 5.78 6.04 c
7.273334 6.04 8.780001 6.42 10.3 7.18 c
10.233334 8.206666 9.873333 9.006666 9.22 9.58 c
7.86 8.926667 6.66 8.6 5.62 8.6 c
5.086667 8.6 4.686667 8.72 4.42 8.96 c
4.153333 9.2 4.02 9.473333 4.02 9.78 c
4.02 10.299999 4.413333 10.719999 5.2 11.04 c
7.6 12.06 l
8.613333 12.486667 9.37 13.033333 9.87 13.7 c
10.37 14.366667 10.62 15.14 10.62 16.02 c
10.62 16.646668 10.506666 17.220001 10.28 17.74 c
10.053333 18.259998 9.716666 18.709999 9.27 19.09 c
8.823333 19.470001 8.266666 19.766668 7.599999 19.98 c
6.933333 20.193331 6.153333 20.299997 5.259999 20.299999 c
3.526666 20.299999 1.873333 19.806665 0.299999 18.82 c
0.3 18.82 l
h
17.440001 15.72 m
15.860001 15.72 l
15.860001 20 l
15.433333 20.08 14.900001 20.120001 14.26 20.120001 c
13.606668 20.120001 13.073334 20.08 12.66 20 c
12.66 6.44 l
12.8 6.3 l
13.96 6.273333 14.923333 6.253333 15.690001 6.24 c
16.456667 6.226667 17.040001 6.22 17.440001 6.22 c
18.173334 6.22 18.843334 6.32 19.450001 6.52 c
20.056667 6.72 20.573334 7.02 21 7.42 c
21.426666 7.82 21.756666 8.316667 21.99 8.91 c
22.223333 9.503333 22.34 10.186667 22.34 10.96 c
22.34 11.733334 22.219999 12.416667 21.98 13.01 c
21.74 13.603334 21.406666 14.099999 20.98 14.5 c
20.553333 14.900001 20.036667 15.203334 19.43 15.41 c
18.823334 15.616666 18.16 15.719999 17.440001 15.72 c
h
15.86 8.66 m
15.86 13.32 l
16.233334 13.306666 16.530001 13.296666 16.75 13.29 c
16.969999 13.283334 17.113333 13.280001 17.18 13.28 c
17.540001 13.28 17.84 13.216666 18.08 13.09 c
18.32 12.963334 18.513332 12.796667 18.66 12.59 c
18.806667 12.383333 18.913334 12.14 18.98 11.860001 c
19.046665 11.580001 19.079998 11.286668 19.08 10.980001 c
19.08 10.686667 19.046667 10.400001 18.98 10.120001 c
18.913332 9.840001 18.809999 9.593334 18.67 9.380001 c
18.530001 9.166668 18.346668 8.996668 18.120001 8.870001 c
17.893333 8.743334 17.626667 8.68 17.320002 8.680001 c
16.500002 8.680001 l
16.500002 8.680001 16.286669 8.673334 15.860002 8.660001 c
15.86 8.66 l
h
34.240002 10.56 m
34.240002 11 34.173336 11.416667 34.040001 11.81 c
33.906666 12.203334 33.73 12.556667 33.510002 12.870001 c
33.290005 13.183334 33.030003 13.456668 32.730003 13.690001 c
32.430004 13.923333 32.120003 14.1 31.800003 14.22 c
32.493336 14.473333 33.006672 15.086667 33.340004 16.06 c
33.940002 17.76 l
34.166668 18.426666 34.500004 18.92 34.940002 19.24 c
34.740002 19.506666 34.440002 19.73 34.040001 19.91 c
33.639999 20.09 33.200001 20.18 32.720001 20.18 c
32.240002 20.18 31.866669 20.043333 31.6 19.77 c
31.333332 19.496668 31.086664 19.02 30.860001 18.34 c
30.140001 16.24 l
29.993336 15.839999 29.796669 15.533333 29.550001 15.32 c
29.303333 15.106667 28.933334 15 28.440001 15 c
27.620001 15 l
27.620001 20 l
27.193335 20.08 26.660002 20.120001 26.02 20.120001 c
25.379999 20.120001 24.853333 20.08 24.440001 20 c
24.440001 6.44 l
24.58 6.3 l
25.74 6.273333 26.716667 6.253333 27.51 6.24 c
28.303333 6.226667 28.926668 6.22 29.380001 6.22 c
30.113335 6.22 30.780001 6.31 31.380001 6.49 c
31.98 6.67 32.489998 6.94 32.91 7.3 c
33.330002 7.66 33.656666 8.113333 33.889999 8.66 c
34.123333 9.206666 34.239998 9.839999 34.239998 10.56 c
34.240002 10.56 l
h
27.620001 8.62 m
27.620001 12.54 l
28.220001 12.54 28.733334 12.53 29.16 12.51 c
29.586666 12.490001 29.93 12.410001 30.190001 12.270001 c
30.450001 12.13 30.646667 11.933333 30.780001 11.68 c
30.913334 11.426667 30.98 11.06 30.980001 10.58 c
30.980001 9.286666 30.353334 8.639999 29.100002 8.639999 c
28.270002 8.639999 l
28.270002 8.639999 28.053335 8.633332 27.620003 8.619999 c
27.620001 8.62 l
h
36.779999 20 m
36.779999 6.34 l
37.193333 6.26 37.726665 6.22 38.379997 6.22 c
39.033329 6.22 39.57333 6.26 39.999996 6.34 c
39.999996 20 l
39.57333 20.08 39.033329 20.120001 38.379997 20.120001 c
37.726665 20.120001 37.193333 20.08 36.779999 20 c
h
53.84 6.2 m
53.98 6.34 l
53.98 19.940001 l
53.446667 20.060001 52.816666 20.120001 52.09 20.120001 c
51.363335 20.120001 50.720001 20.08 50.16 20 c
47.02 12.84 l
46.646667 12.026667 46.266666 11.086667 45.880001 10.020001 c
45.82 10.040001 l
45.98 11.986668 46.060001 13.980001 46.060001 16.02 c
46.060001 20 l
45.646667 20.08 45.146667 20.120001 44.560001 20.120001 c
43.973335 20.120001 43.48 20.08 43.080002 20 c
43.080002 6.4 l
43.586666 6.28 44.196667 6.22 44.910004 6.22 c
45.623341 6.22 46.260006 6.26 46.820004 6.34 c
49.920002 13.48 l
50.480003 14.799999 50.893337 15.813333 51.160004 16.52 c
51.240005 16.479999 l
51.080006 14.626666 51.000004 12.66 51.000004 10.58 c
51.000004 8.139999 l
51.000004 7.446666 51.140003 6.949999 51.420002 6.65 c
51.700001 6.35 52.153336 6.2 52.780003 6.2 c
53.840004 6.2 l
53.84 6.2 l
h
62.18 8.98 m
62.200001 10.459999 l
62.200001 20 l
61.746666 20.08 61.206669 20.120001 60.580002 20.120001 c
59.953335 20.120001 59.42667 20.08 59 20 c
59 8.98 l
57.720001 9 l
55.66 9 l
55.580002 8.613334 55.540001 8.17 55.540001 7.67 c
55.540001 7.17 55.580002 6.726667 55.66 6.34 c
65.559998 6.34 l
65.666664 6.686667 65.720001 7.106667 65.720001 7.6 c
65.720001 8.093333 65.58667 8.45 65.32 8.67 c
65.053329 8.89 64.626663 9 64.040001 9 c
63.459999 9 l
62.200001 8.98 l
62.18 8.98 l
h
70.339996 15.96 m
70.32 17.4 l
70.32 17.42 l
70.933334 17.393333 71.426666 17.379999 71.800003 17.379999 c
76.440002 17.379999 l
76.440002 17.873333 76.420006 18.253332 76.380005 18.519999 c
76.220009 19.546665 75.540009 20.059998 74.340004 20.059998 c
69.020004 20.059998 l
68.446671 20.059998 67.996674 19.893332 67.670006 19.559998 c
67.343338 19.226664 67.180008 18.773331 67.180008 18.199997 c
67.180008 6.479997 l
67.320007 6.339997 l
75.94001 6.339997 l
76.020012 6.726664 76.060013 7.146663 76.060013 7.599997 c
76.060013 8.05333 75.966682 8.526664 75.780014 9.019997 c
70.320015 9.019997 l
70.340012 10.459997 l
70.340012 11.859997 l
70.686676 11.846664 71.140007 11.839996 71.700012 11.839996 c
74.76001 11.839996 l
74.880013 12.21333 74.94001 12.639997 74.94001 13.119996 c
74.94001 13.599996 74.880013 14.039995 74.76001 14.439996 c
70.340012 14.439996 l
70.340012 15.959995 l
70.339996 15.96 l
h
88.459999 10.56 m
88.459999 11 88.393333 11.416667 88.260002 11.81 c
88.126671 12.203334 87.950005 12.556667 87.730003 12.870001 c
87.510002 13.183334 87.25 13.456668 86.950005 13.690001 c
86.650009 13.923333 86.340004 14.1 86.020004 14.22 c
86.713341 14.473333 87.226669 15.086667 87.560005 16.06 c
88.160004 17.76 l
88.386665 18.426666 88.720001 18.92 89.160004 19.24 c
88.959999 19.506666 88.660004 19.73 88.260002 19.91 c
87.860001 20.09 87.420006 20.18 86.940002 20.18 c
86.459999 20.18 86.08667 20.043333 85.82 19.77 c
85.553329 19.496668 85.306664 19.02 85.080002 18.34 c
84.360001 16.24 l
84.213333 15.839999 84.01667 15.533333 83.770004 15.32 c
83.523338 15.106667 83.153343 15 82.660004 15 c
81.840004 15 l
81.840004 20 l
81.413338 20.08 80.880005 20.120001 80.240005 20.120001 c
79.600006 20.120001 79.073341 20.08 78.660004 20 c
78.660004 6.44 l
78.800003 6.3 l
79.959999 6.273333 80.936668 6.253333 81.730003 6.24 c
82.523338 6.226667 83.146675 6.22 83.600006 6.22 c
84.333336 6.22 85.000008 6.31 85.600006 6.49 c
86.200005 6.67 86.710007 6.94 87.130005 7.3 c
87.550003 7.66 87.876671 8.113333 88.110008 8.66 c
88.343346 9.206666 88.460014 9.839999 88.460007 10.56 c
88.459999 10.56 l
h
81.839996 8.62 m
81.839996 12.54 l
82.439995 12.54 82.953331 12.53 83.379997 12.51 c
83.806664 12.490001 84.149994 12.410001 84.409996 12.270001 c
84.669998 12.13 84.866661 11.933333 84.999992 11.68 c
85.133324 11.426667 85.199989 11.06 85.199989 10.58 c
85.199989 9.286666 84.573326 8.639999 83.319992 8.639999 c
82.48999 8.639999 l
82.48999 8.639999 82.273323 8.633332 81.839989 8.619999 c
81.839996 8.62 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
